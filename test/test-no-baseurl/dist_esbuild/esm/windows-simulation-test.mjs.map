{
  "version": 3,
  "sources": ["../../src/windows-simulation-test.ts"],
  "sourcesContent": ["// Test file to simulate Windows path scenarios\n// This tests the plugin's ability to handle Windows-style paths and convert them to POSIX\n\n// Import from various depths to test path resolution\nimport { jsonData } from \"./extensions/data\";\nimport { aliasedImport } from \"./alias\";\nimport { deepNestedExport } from \"./nested/level1/level2/level3/deep-module\";\nimport { folderImport } from \"./folder-import\";\nimport { test } from \"./subpath\";\n\n// Test function that simulates what the plugin would process\nexport const simulateWindowsPathHandling = () => {\n  const testCases = [\n    {\n      name: \"Direct file import\",\n      import: jsonData,\n      expected: \"object\", // jsonData is actually an object, not a string\n    },\n    {\n      name: \"Alias resolution\",\n      import: aliasedImport,\n      expected: \"string\",\n    },\n    {\n      name: \"Deep nested import\",\n      import: deepNestedExport,\n      expected: \"string\",\n    },\n    {\n      name: \"Folder import\",\n      import: folderImport,\n      expected: \"string\",\n    },\n    {\n      name: \"Subpath import\",\n      import: test,\n      expected: \"string\",\n    },\n  ];\n\n  console.log(\"=== Windows Path Simulation Test ===\");\n\n  let allPassed = true;\n  testCases.forEach(({ name, import: imported, expected }) => {\n    const actualType = typeof imported;\n    const passed = actualType === expected;\n\n    if (passed) {\n      console.log(`\u2705 ${name}: ${actualType}`);\n    } else {\n      console.log(`\u274C ${name}: expected ${expected}, got ${actualType}`);\n      allPassed = false;\n    }\n  });\n\n  if (allPassed) {\n    console.log(\"\u2705 All Windows path simulations passed!\");\n    console.log(\"\u2705 Plugin correctly handles path normalization\");\n  } else {\n    console.log(\"\u274C Some Windows path simulations failed\");\n  }\n\n  return allPassed;\n};\n\n// Export all imports to ensure they're processed by the plugin\nexport { jsonData, aliasedImport, deepNestedExport, folderImport, test };\n"],
  "mappings": "AAIA,SAAS,gBAAgB;AACzB,SAAS,qBAAqB;AAC9B,SAAS,wBAAwB;AACjC,SAAS,oBAAoB;AAC7B,SAAS,YAAY;AAGd,MAAM,8BAA8B,MAAM;AAC/C,QAAM,YAAY;AAAA,IAChB;AAAA,MACE,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,UAAU;AAAA;AAAA,IACZ;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,UAAU;AAAA,IACZ;AAAA,EACF;AAEA,UAAQ,IAAI,sCAAsC;AAElD,MAAI,YAAY;AAChB,YAAU,QAAQ,CAAC,EAAE,MAAM,QAAQ,UAAU,SAAS,MAAM;AAC1D,UAAM,aAAa,OAAO;AAC1B,UAAM,SAAS,eAAe;AAE9B,QAAI,QAAQ;AACV,cAAQ,IAAI,UAAK,IAAI,KAAK,UAAU,EAAE;AAAA,IACxC,OAAO;AACL,cAAQ,IAAI,UAAK,IAAI,cAAc,QAAQ,SAAS,UAAU,EAAE;AAChE,kBAAY;AAAA,IACd;AAAA,EACF,CAAC;AAED,MAAI,WAAW;AACb,YAAQ,IAAI,6CAAwC;AACpD,YAAQ,IAAI,oDAA+C;AAAA,EAC7D,OAAO;AACL,YAAQ,IAAI,6CAAwC;AAAA,EACtD;AAEA,SAAO;AACT;",
  "names": []
}
