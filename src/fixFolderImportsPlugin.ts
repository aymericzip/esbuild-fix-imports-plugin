import { existsSync, statSync } from "fs";
import { dirname, resolve } from "path";
import { type Plugin } from "esbuild";

/**
 * ESBuild plugin that replaces import paths pointing to directories with explicit paths to the index file.
 * This addresses the issue where importing from a directory without specifying the index file may cause problems in some environments.
 *
 * For example, it transforms:
 * ```javascript
 * import { myFunction } from '../folder';
 * ```
 * into:
 * ```javascript
 * import { myFunction } from '../folder/index';
 * ```
 *
 * @returns {import('esbuild').Plugin} An ESBuild plugin object.
 */
export const fixFolderImportsPlugin = (): Plugin => ({
  name: "fixFolderImportsPlugin",
  setup: (build) => {
    // Determine the output file extension based on the build options.
    const outExtension = build.initialOptions.outExtension?.[".js"] ?? ".js";

    // Hook into the 'onEnd' event of the build process.
    build.onEnd((result) => {
      // If there are build errors, do not proceed.
      if (result.errors.length > 0) {
        return;
      }

      // Iterate over each output file generated by ESBuild.
      for (const outputFile of result.outputFiles ?? []) {
        // Only target files with the specified output extension.
        // This ignores additional files emitted, like sourcemaps (e.g., "*.js.map").
        if (!outputFile.path.endsWith(outExtension)) {
          continue;
        }

        // Get the original file contents and the file path.
        const fileContents = outputFile.text;
        const filePath = outputFile.path;

        // Modify the file contents by replacing directory imports with explicit index file imports.
        const nextFileContents = modifyFolderImports(fileContents, filePath);

        // Update the output file contents with the modified contents.
        outputFile.contents = Buffer.from(nextFileContents);
      }
    });
  },
});

/**
 * Regular expressions to match ESM import statements and CJS require statements with relative paths.
 */
const ESM_RELATIVE_IMPORT_EXP = /from\s+['"](\..+?)['"]/g;
const CJS_RELATIVE_IMPORT_EXP = /require\(['"](\..+?)['"]\)/g;

/**
 * Regular expression to detect if the import path has a file extension.
 */
const hasExtensionRegex = /\.[^./\\]+$/;

/**
 * Modifies the contents of a file by replacing import paths that point to directories
 * with explicit index file paths.
 *
 * @param {string} contents - The contents of the file to modify.
 * @param {string} filePath - The path of the current file.
 * @returns {string} The modified file contents.
 */
const modifyFolderImports = (contents: string, filePath: string) => {
  // Replace ESM import paths that point to directories.
  contents = contents.replace(ESM_RELATIVE_IMPORT_EXP, (match, importPath) => {
    const newImportPath = replaceFolderImport(importPath, filePath);
    return match.replace(importPath, newImportPath);
  });

  // Replace CJS require paths that point to directories.
  contents = contents.replace(CJS_RELATIVE_IMPORT_EXP, (match, importPath) => {
    const newImportPath = replaceFolderImport(importPath, filePath);
    return match.replace(importPath, newImportPath);
  });

  return contents;
};

/**
 * Replaces an import path that points to a directory with a path to the directory's index file.
 *
 * @param {string} importPath - The original import path from the file.
 * @param {string} filePath - The path of the current file.
 * @returns {string} The new import path with '/index' appended if necessary.
 */
const replaceFolderImport = (importPath: string, filePath: string) => {
  // If the path ends with '/' or '.', or has a file extension, we don't modify it.
  if (
    importPath.endsWith("/") ||
    importPath.endsWith(".") ||
    hasExtensionRegex.test(importPath)
  ) {
    return importPath;
  }

  // Resolve the import path relative to the current file's directory.
  const currentDir = dirname(filePath);
  const resolvedPath = resolve(currentDir, importPath);

  // Check if the resolved path is a directory.
  if (existsSync(resolvedPath) && statSync(resolvedPath).isDirectory()) {
    // Append '/index' to the import path to explicitly reference the index file.
    return `${importPath}/index`;
  }

  // Otherwise, return the original import path.
  return importPath;
};
